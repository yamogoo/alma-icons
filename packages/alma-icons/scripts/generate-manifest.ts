import { readdirSync, writeFileSync, statSync } from "fs";
import { join, resolve, extname, relative } from "path";

const root = resolve(__dirname, "..");
const iconsDir = join(root, "icons");
const outJs = join(root, "index.js");
const outDts = join(root, "index.d.ts");

function walk(dir: string): string[] {
  const entries = readdirSync(dir);
  const files: string[] = [];

  for (const entry of entries) {
    const fullPath = join(dir, entry);
    const stats = statSync(fullPath);

    if (stats.isDirectory()) {
      files.push(...walk(fullPath));
    } else if (stats.isFile() && extname(entry) === ".svg") {
      files.push(fullPath);
    }
  }

  return files;
}

const files = walk(iconsDir);

const nameSet = new Set<string>();
const styleSet = new Set<string>();
const weightSet = new Set<string>();

function parseFileName(filePath: string) {
  const base = filePath.split("/").pop()!;
  const noExt = base.replace(/\.svg$/, "");

  const parts = noExt.split("_");
  if (parts.length !== 3) {
    throw new Error(`Unexpected icon name format: ${base}`);
  }

  const [name, style, weight] = parts;
  nameSet.add(name);

  styleSet.add("fill");
  styleSet.add("outline");

  for (let i = 1; i <= 5; i++) {
    weightSet.add(`${i}00`);
  }

  return { key: noExt, name, style, weight };
}

const parsed = files.map((f) => {
  const rel = "./" + relative(root, f).replace(/\\/g, "/");
  const { key } = parseFileName(f);
  return { key, rel };
});

const entries = parsed.map(
  ({ key, rel }) => `  "${key}": () => import("${rel}")`
);

// ---------- JS (runtime) ----------
const jsContent =
  `// AUTO-GENERATED by AlmaIconsResolver\n\n` +
  `export const iconManifest = {\n${entries.join(",\n")}\n};\n\n` +
  `export default iconManifest;\n\n` +
  `export const iconNames = ${JSON.stringify([...nameSet], null, 2)};\n` +
  `export const iconStyles = ${JSON.stringify([...styleSet], null, 2)};\n` +
  `export const iconWeights = ${JSON.stringify([...weightSet], null, 2)};\n`;

writeFileSync(outJs, jsContent, "utf8");

// ---------- DTS (types) ----------
const iconNameUnion = [...nameSet].map((n) => `"${n}"`).join(" | ");
const iconStyleUnion = [...styleSet].map((s) => `"${s}"`).join(" | ");
const iconWeightUnion = [...weightSet].map((w) => `"${w}"`).join(" | ");
const iconFullUnion = parsed.map(({ key }) => `"${key}"`).join(" | ");

const dtsContent =
  `// AUTO-GENERATED by AlmaIconsResolver\n\n` +
  `export type IconName = ${iconNameUnion};\n` +
  `export type IconStyle = ${iconStyleUnion};\n` +
  `export type IconWeight = ${iconWeightUnion};\n\n` +
  `export type IconFullName = ${iconFullUnion};\n\n` +
  `export declare const iconManifest: Record<IconFullName, () => Promise<any>>;\n` +
  `export default iconManifest;\n\n` +
  `export declare const iconNames: readonly IconName[];\n` +
  `export declare const iconStyles: readonly IconStyle[];\n` +
  `export declare const iconWeights: readonly IconWeight[];\n`;

writeFileSync(outDts, dtsContent, "utf8");

console.log(
  `Generated manifest: ${parsed.length} icons, ` +
    `${nameSet.size} names, ${styleSet.size} styles, ${weightSet.size} weights`
);
